/**
* @Description 用来美化d3.js实现的图表
* @author xinghua.wen
*/
.axis path, .axis line {
    fill: none;
    stroke: #000;
}
g.axis path {
    shape-rendering: crispEdges;
}

/**************  作业明细图样式 ***************/
.node text {
    font: 11px sans-serif;
    pointer-events: none;
  }
  path.link {
    fill: none;
    stroke: $success;
    stroke-width: 1.5px;
    opacity: 0.5;
  }
  g.tick line{
    shape-rendering: crispEdges;
  }
  rect.state {
      // stroke: black;
      shape-rendering: crispEdges;
      cursor: pointer;
  }
  rect.null, rect.scheduled, rect.undefined {
      fill: white;
      stroke: #e1e6e5;
  }
  rect.success {
      fill: $success;
  }
  rect.running {
      fill: $running;
  }
  rect.failed {
      fill: $fail;
  }
  rect.scheduled {
    fill: $scheduled;
  }
  
  rect.queued {
      fill: $queued;
  }
  rect.shutdown {
      fill: $success;
  }
  rect.upstream_failed {
      fill: $upstream_failed;
  }
  rect.up_for_retry {
      fill: $retry;
  }
  rect.skipped {
      fill: $skipped;
  }
  .tooltip.in {
      opacity: 1;
      filter: alpha(opacity=100);
  }
  
  .axis path, .axis line {
      fill: none;
      stroke: #e1e6e5;
  }
  .axis text {
      font: 11px sans-serif;
      fill: #646464;
  }
  
  g.parent rect {
      cursor: pointer;
  }
  
  g.node.collapsed rect {
      // stroke: #444;
      stroke-width: 4px;
  }
  g.node {
      &.parent {
          & > .task {
              fill: #fff;
              stroke: $success;            
              stroke-width: 4;
          }
          // &.collapsed {
          //     & > .task {
          //         stroke: #e1e6e5;
          //     }
          // }
      }
      &.root {
          & > .task {
              fill: $success;
          }
      }
      &.leaf {
          & > .task {
              fill: #fff;
              stroke: $success;            
          }
      }
  }
  rect {
      fill: white;
      stroke-width: 1.5px;
  }
  g.axis path {
      shape-rendering: crispEdges;
      stroke: #e1e6e5;
  }
  .tree-graph-container {
      margin-top: 50px;
      padding-left: 20px;
  }
  line.arrow {
      stroke: #e1e6e5;
      stroke-dasharray: 6 5;
  }

  /**************** dagre 节点图************************/
  g.node.dagre {
    tspan {
      fill: #fff;
    }
    &.no-status {
      rect {
        stroke: #333;
        fill: #fff;
      }
      ellipse {
        stroke: #333;
        fill: #fff;
      }
      circle {
        stroke: #333;
        fill: #fff;
      }
      tspan {
        fill: #333;
      }
    }
    &.success {
      rect {
        stroke: #fff;
        fill: $success;
      }
      ellipse {
        stroke: #fff;
        fill: $success;
      }
      circle {
        stroke: #fff;
        fill: $success;
      }
    }
    &.up_for_retry {
        rect {
          stroke: #fff;
          fill: $retry;
        }
        ellipse {
          stroke: #fff;
          fill: $retry;
        }
        circle {
          stroke: #fff;
          fill: $retry;
        }
      }
    &.scheduled {
        rect {
          stroke: #fff;
          fill: $scheduled;
        }
        ellipse {
          stroke: #fff;
          fill: $scheduled;
        }
        circle {
          stroke: #fff;
          fill: $scheduled;
        }
      }
    &.failed {
      rect {
        stroke: #fff;
        fill: $fail;
      }
      ellipse {
        stroke: #fff;
        fill: $fail;
      }
      circle {
        stroke: #fff;
        fill: $fail;
      }
    }
    &.upstream_failed {
      rect {
        stroke: #fff;
        fill: $upstream_failed;
      }
      ellipse {
        stroke: #fff;
        fill: $upstream_failed;
      }
      circle {
        stroke: #fff;
        fill: $upstream_failed;
      }
    }
    &.running {
      rect {
        stroke: #fff;
        fill: $running;
      }
      ellipse {
        stroke: #fff;
        fill: $running;
      }
      circle {
        stroke: #fff;
        fill: $running;
      }
    }
    &.skipped {
      rect {
        stroke: #fff;
        fill: $skipped;
      }
      ellipse {
        stroke: #fff;
        fill: $skipped;
      }
      circle {
        stroke: #fff;
        fill: $skipped;
      }
    }
    &.queued {
      rect {
        stroke: #fff;
        fill: $queued;
      }
      ellipse {
        stroke: #fff;
        fill: $queued;
      }
      circle {
        stroke: #fff;
        fill: $queued;
      }
    }
    &.BashOperator {
      &:hover {
        & > rect {
          fill: #7cc9fa;
        }  
      }
    }
    &.PythonOperator {
      & > rect {
          fill: #f8b96c;        
      }
    }
    &.BranchPythonMapOperator {
      &:hover {
        & > ellipse {
          fill: #c52bd3;
        }  
      }
    }
    &.JoinOperator {
      &:hover {
        & > circle {
          fill: #0beb8d;
        }  
      }
    }
  }
  .zoom-div {
    position: absolute;
    bottom: 48px;
    right: 48px;
    .el-button + .el-button {
        margin-left: 0;
    }
  }